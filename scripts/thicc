#!/usr/bin/env python
import sys
import subprocess
import argparse as ag
import thicc.lexer
import thicc.parser
import thicc.generator

def runLexer(filename):
    with open(filename, "r") as f:
        text = f.read()

    lex = thicc.lexer.Lexer()
    toks = lex.tokenize(text)
    print(toks)

def runParser(filename):
    with open(filename, "r") as f:
        text = f.read()

    lex = thicc.lexer.Lexer()
    parser = thicc.parser.Parser()

    toks = lex.tokenize(text)
    ast = parser.parse(toks)

    print(ast)

def compile(filename, outname=None):
    with open(filename, "r") as f:
        text = f.read()

    lex = thicc.lexer.Lexer()
    parser = thicc.parser.Parser()
    generator = thicc.generator.Generator()

    toks = lex.tokenize(text)
    ast = parser.parse(toks)
    code = generator.generate(ast)

    sname = filename.split("/")[-1]
    if sname[-2:] == ".c":
        sname = sname[:-2] + ".s"
    else:
        sname += ".s"

    with open(sname, "w") as f:
        f.write(code)

    command = ["gcc"]
    if outname is not None:
        command += ["-o", outname]
    command.append(sname)

    subprocess.run(command)


if __name__ == "__main__":

    ap = ag.ArgumentParser(description="Compile C code.")
    ap.add_argument("--lex", action='store_true')
    ap.add_argument("--parse", action='store_true')
    ap.add_argument("-o", nargs=1)
    ap.add_argument("input_files", nargs='+')
    ap.parse_args(" ".join(sys.argv))
    args = ap.parse_args()

    if args.lex:
        for fname in args.input_files:
            runLexer(fname)

    if args.parse:
        for fname in args.input_files:
            runParser(fname)

    if not args.lex and not args.parse:
        try:
            outname = args.o[0]
        except:
            outname = None
        for fname in args.input_files:
            compile(fname, outname)

